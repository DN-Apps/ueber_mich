name: QA Deploy

on:
  push:
    branches: [qa]

jobs:
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      - name: Set image name
        id: meta
        run: |
          echo "image=ghcr.io/${{ github.repository_owner }}/portfolio-${{ matrix.service }}" >> $GITHUB_OUTPUT

      - name: Build ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            docker build \
              --build-arg API_PUBLIC_URL=https://qa.ned-it.de/api/ \
              -t ${{ steps.meta.outputs.image }}:qa \
              -t ${{ steps.meta.outputs.image }}:${{ github.sha }} \
              ./frontend
          else
            docker build \
              -t ${{ steps.meta.outputs.image }}:qa \
              -t ${{ steps.meta.outputs.image }}:${{ github.sha }} \
              ./backend
          fi

      - name: Push ${{ matrix.service }}
        run: |
          docker push ${{ steps.meta.outputs.image }}:qa
          docker push ${{ steps.meta.outputs.image }}:${{ github.sha }}

  deploy:
    name: Deploy to QA VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH deploy (pull + up + schema)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            cd /srv/docker/qa/portfolio/compose

            echo "Login GHCR"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.REGISTRY_USER }}" --password-stdin

            echo "Pull images"
            docker compose -f docker-compose.qa.yml pull

            echo "Up services"
            docker compose -f docker-compose.qa.yml up -d

            echo "Apply DB schema (idempotent)"
            docker exec qa-portfolio-db sh -lc "mysql -u'${MYSQL_USER}' -p'${MYSQL_PASSWORD}' '${MYSQL_DATABASE}' -e \"
              CREATE TABLE IF NOT EXISTS firmen (
                id INT PRIMARY KEY AUTO_INCREMENT,
                name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              CREATE TABLE IF NOT EXISTS benutzerdaten (
                id INT PRIMARY KEY AUTO_INCREMENT,
                firma_id INT,
                email VARCHAR(255) UNIQUE,
                passhash VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX (email),
                FOREIGN KEY (firma_id) REFERENCES firmen(id)
                  ON DELETE SET NULL ON UPDATE CASCADE
              );
            \""

      - name: Smoke tests
        run: |
          curl -sSf https://qa.ned-it.de/api/health | grep '"status":"ok"'
          # Frontend-Health ist optional
          curl -sSf https://qa.ned-it.de/health | grep '"status":"ok"' || true
